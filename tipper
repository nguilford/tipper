#!/bin/bash

set -e

dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
default_config_path="${dir}/config"
config_path="${default_config_path}"


usage()
{
cat << EOF

OPTIONS:
    -c        set this option to create database and schema from dump;
              if set with -d, dump will be performed first;
              will fail if dumpfile does not exist and -d not set

    -d        set this option to dump schema from source

    -h        show this help text and exit

    -p PATH   path to config file

    -u        set this option to create user in target db if it doesn't already exist
EOF
}

set_config()
{
    if [ ! -e ${config_path} ]
    then
        printf "No config file found. Please make sure config exists at ${default_config_path} "
        printf "or specify the path to your config file with the -p option\n"
        exit 1
    fi

    source ${config_path}

    # Allow for relative and absolute target file path
    if [[ -n "${target_file}" ]] && \
       [[ ${target_file} != "~"* ]] && \
       [[ ${target_file} != "/"* ]] && \
       [[ ${target_file} != "./"* ]] && \
       [[ ${target_file} != "../"* ]]
    then
        target_file=${dir}/${target_file}
    fi
}

dump()
{
    if [[ -z ${source_host} ]] || \
       [[ -z ${source_user} ]] || \
       [[ -z ${target_file} ]]
    then
        printf "Missing config values.\n"
        printf "The following values must be set if you are dumping schema from source:\n"
        printf "\tsource_host\n"
        printf "\tsource_user\n"
        printf "\ttarget_file\n"
        exit 1
    fi

    printf "Dumping ${source_database} from source on ${source_host} to ${target_file}...\n"

    cmd="mysqldump -h${source_host} -u${source_user}"

    ## Configure all the dump options based on config
    if [ -n "${source_password}" ]
    then
        cmd="${cmd} -p${source_password}"
    fi

    if [[ -n "${source_add_drop_database}" ]] && ${source_add_drop_database}
    then
        cmd="${cmd} --add-drop-database"
    fi

    if [[ -z "${source_add_drop_table}" ]] || ! ${source_add_drop_table}
    then
        cmd="${cmd} --skip-add-drop-table"
    fi

    if [[ -z "${source_dump_data}" ]] || ! ${source_dump_data}
    then
        cmd="${cmd} --no-data"
    fi

    if [[ -n "${source_no_create_db}" ]] && ${source_no_create_db}
    then
        cmd="${cmd} --no-create-db"
    fi

    if [[ -n "${source_no_create_info}" ]] && ${source_no_create_info}
    then
        cmd="${cmd} --no-create-info"
    fi

    if [ -n "${source_database}" ]
    then
        cmd="${cmd} --databases ${source_database}"

        if [ -n "${source_tables}" ]
        then
            cmd="${cmd} ${source_tables}"
        fi
    else
        cmd="${cmd} --all-databases"
    fi

    ## Now dump!
    ${cmd} > ${target_file}
}

create_database()
{
    printf "Creating database on ${target_host} from ${target_file}...\n"

    if [[ -z ${target_host} ]] || \
       [[ -z ${target_user} ]] || \
       [[ -z ${target_file} ]]
    then
        printf "Missing config values.\n"
        printf "The following values must be set if you are dumping schema from source:\n"
        printf "\ttarget_host\n"
        printf "\ttarget_user\n"
        printf "\ttarget_file\n"
        exit 1
    fi

    if [ ! -e ${target_file} ]
    then
        printf "Dump file ${target_file} does not exist.\n"
        exit 1
    fi

    cmd="mysql -h${target_host} -u${target_user}"

    if [ -n "${target_password}" ]
    then
        cmd="${cmd} -p${target_password}"
    fi

    ${cmd} < ${target_file}
}

create_user()
{
    if [[ -z ${target_host} ]] || \
       [[ -z ${target_user} ]] || \
       [[ -z ${target_root_user} ]]
    then
        printf "Missing config values.\n"
        printf "The following values must be set if you are creating a new user:\n"
        printf "\ttarget_host\n"
        printf "\ttarget_user\n"
        printf "\ttarget_root_user\n"
        exit 1
    fi

    ### Assemble CREATE USER statement
    statement="CREATE USER '${target_user}'@'%'"

    if [ -n "${target_password}" ]
    then
        statement="${statement} IDENTIFIED BY '${target_password}'"
    fi

    statement="${statement}; GRANT ALL PRIVILEGES ON *.* TO '${target_user}'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;"


    ### Assemble base mysql command
    base_cmd="mysql -h${target_host} -u${target_root_user}"

    if [ -n "${target_root_password}" ]
    then
        base_cmd="${base_cmd} -p${target_root_password}"
    fi


    ### If user does not exist, create it; otherwise, skip
    if [ "$(${base_cmd} -se "SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = '${target_user}')")" == "0" ]
    then
        printf "Creating user ${target_user} in database on ${target_host}...\n"
        ${base_cmd} -e "${statement}"
    else
        printf "User ${target_user} already exists. Skipping create\n"
    fi
}

while getopts ":hp:duc" OPTION
do
    case $OPTION in
        h)
            usage
            exit 0
            ;;
        p)
            config_path=${OPTARG}
            ;;
        d)
            dump=1
            ;;
        u)
            user_create=1
            ;;
        c)
            database_create=1
            ;;
        :)  printf "Missing option argument for -$OPTARG\n"
            exit 1
            ;;
        \?)
            printf "ERROR: Invalid argument\n"
            usage
            exit 1
            ;;
    esac
done

printf "Setting configuration...\n"
set_config

if [ -n "${dump}" ]
then
    dump
fi

if [ -n "${user_create}" ]
then
  create_user
fi

if [ -n "${database_create}" ]
then
  create_database
fi
